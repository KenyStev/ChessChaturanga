/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ChessChaturanga.Visual;

import ChessChaturanga.Logica.*;
import java.awt.Rectangle;
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 *
 * @author KenyStev
 */
public class BoardVisual extends javax.swing.JFrame {

    public Board borad;
    private Casilla[][] casillas;
    private Casilla casillaActiva;
    private static final String PIECESATE = "Piezas comidas: ";

    /**
     * Creates new form BoardVisual
     */
    public BoardVisual(User player1, User player2) {
        initComponents();
        borad = new Board(player1, player2);
        casillas = new Casilla[borad.SIZE][borad.SIZE];
        lblPlayer1.setText(player1.getName());
        lblPlayer2.setText(player2.getName());
        showPiecesAte();
        initCasillas();
    }

    public BoardVisual(Board b) {
        borad=b;
        casillas = new Casilla[borad.SIZE][borad.SIZE];
        initCasillas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        table = new javax.swing.JPanel();
        paneUsersInfo = new javax.swing.JPanel();
        lblPlayer2 = new javax.swing.JLabel();
        lblPlayer1 = new javax.swing.JLabel();
        lblP2AtePieces = new javax.swing.JLabel();
        lblP1AtePieces = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBounds(new java.awt.Rectangle(250, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);

        javax.swing.GroupLayout tableLayout = new javax.swing.GroupLayout(table);
        table.setLayout(tableLayout);
        tableLayout.setHorizontalGroup(
            tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 557, Short.MAX_VALUE)
        );
        tableLayout.setVerticalGroup(
            tableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        lblPlayer2.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N

        lblPlayer1.setFont(new java.awt.Font("DejaVu Sans", 1, 18)); // NOI18N

        javax.swing.GroupLayout paneUsersInfoLayout = new javax.swing.GroupLayout(paneUsersInfo);
        paneUsersInfo.setLayout(paneUsersInfoLayout);
        paneUsersInfoLayout.setHorizontalGroup(
            paneUsersInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneUsersInfoLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(paneUsersInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblP2AtePieces, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblP1AtePieces, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        paneUsersInfoLayout.setVerticalGroup(
            paneUsersInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(paneUsersInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPlayer2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblP2AtePieces, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 389, Short.MAX_VALUE)
                .addComponent(lblP1AtePieces, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPlayer1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addComponent(table, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(paneUsersInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(table, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(paneUsersInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table.getAccessibleContext().setAccessibleName("");
        table.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BoardVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BoardVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BoardVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BoardVisual.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BoardVisual(new User(Color.RED, "Keny", "keny", null, null), new User(Color.GREEN, "Konami", "kon", null, null)).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel lblP1AtePieces;
    private javax.swing.JLabel lblP2AtePieces;
    private javax.swing.JLabel lblPlayer1;
    private javax.swing.JLabel lblPlayer2;
    private javax.swing.JPanel paneUsersInfo;
    private javax.swing.JPanel table;
    // End of variables declaration//GEN-END:variables

    private void initCasillas() {
        Piece[][] pieces = borad.getPieces();
        table.setBounds(table.getX(), table.getY(), 0, 0);
        for (int i = 0; i < casillas.length; i++) {
            for (int j = 0; j < casillas.length; j++) {
                casillas[j][i] = new Casilla(new Rectangle(i * 64, j * 64, 64, 64), j,i);
                casillas[j][i].addActionListener(new InputListener(casillas[j][i], this));
                casillas[j][i].setPiece(pieces[j][i]);
                table.setBounds(table.getX(), table.getY(), table.getWidth() + casillas[j][i].getWidth(), table.getHeight() + casillas[j][i].getHeight());
                table.add(casillas[j][i]);
            }
        }
        
    }

    public void showWhereCanMove(ArrayList<Position> movementsValids) {
        for (Position m : movementsValids) {
            casillas[m.row][m.col].activeToMove();
            if(casillas[m.row][m.col].getPiece()==null)
                casillas[m.row][m.col].setIcon(new ImageIcon(getClass().getResource("/ChessChaturanga/Assets/toMove.png")));
            else
                casillas[m.row][m.col].setIcon(new ImageIcon(getClass().getResource("/ChessChaturanga/Assets/toMove"+casillas[m.row][m.col].getPiece()+".png")));
        }
        getContentPane().repaint();
    }

    private void unShowWhereCanMove(ArrayList<Position> movementsValids) {
        for (Position m : movementsValids) {
            casillas[m.row][m.col].unActiveToMove();
        }
        getContentPane().repaint();
    }

    public void clickedCasilla(Casilla casilla) {
        if(casilla.isActiveToMove()){
            unShowWhereCanMove(casillaActiva.getPiece().getMovementsValids(borad));
            if(mover(casilla)){
                casillaActiva=null;
                showPiecesAte();
            }
        }else if(casilla.getPiece()==null || 
                //Si se selecciona una pieza contraria que no esta activa para mover, se deselecciona la que estaba si lo habia
                (casilla.getPiece()!=null && !borad.getActivo().valirColor(casilla.getPiece().getColor()))){
            casilla.unSelect();
            if(casillaActiva!=null)
                unShowWhereCanMove(casillaActiva.getPiece().getMovementsValids(borad));
            casillaActiva=null;
            reOrder();
        }else if(borad.getActivo().valirColor(casilla.getPiece().getColor())){
            if(casillaActiva!=null)
                unShowWhereCanMove(casillaActiva.getPiece().getMovementsValids(borad));
            casillaActiva = casilla;
            showWhereCanMove(casillaActiva.getPiece().getMovementsValids(borad));
        }
    }

    private void reOrder() {
        Piece[][] pieces = borad.getPieces();
        for (int i = 0; i < casillas.length; i++) {
            for (int j = 0; j < casillas.length; j++) {
                casillas[j][i].setPiece(pieces[j][i]);
            }
        }
        getContentPane().repaint();
    }

    private boolean mover(Casilla casilla) {
        boolean state = casilla.excangePiece(casillaActiva, borad);
        if(state)reOrder();
        return state;
    }

    private void showPiecesAte() {
        lblP1AtePieces.setText(PIECESATE+borad.getAtePieces1());
        lblP2AtePieces.setText(PIECESATE+borad.getAtePieces2());
    }
}
