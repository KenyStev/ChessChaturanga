/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ChessChaturanga.Visual;

import ChessChaturanga.Logica.Datos;
import ChessChaturanga.Logica.User;
import ChessChaturanga.Logica.saveWithArrayList;
import java.util.ArrayList;
import java.util.TreeSet;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.plaf.TableUI;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author KenyStev
 */
public class Ranking extends javax.swing.JInternalFrame {
    JTable table;

    /**
     * Creates new form Ranking
     */
    public Ranking() {
        initComponents();
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 424, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 283, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    private void init() {
        setTitle("Ranking");
        
        JScrollPane scroller = new JScrollPane();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scroller, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(scroller, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        
        table = new JTable(new DefaultTableModel(getData(), getColumnNames()));
        
        scroller.setVisible(true);
        scroller.setViewportView(table);
        getContentPane().add(scroller);
        table.setBounds(getBounds());
        table.setVisible(true);
        table.setEnabled(false);
        table.repaint();
        setClosable(true);
    }
    
    private String[] getColumnNames(){
        return new String[] {"Lugar","Username","Puntos"};
    }
    
    private String[][] getData(){
        String[][] data;
        ArrayList<User> users = new ArrayList<>();
        
        if(Datos.saver instanceof saveWithArrayList){
            users = ((saveWithArrayList)Datos.saver).users;
        }
        users = sort(users);
        data = new String[users.size()][3];
        
        for (int i = 0; i < users.size(); i++) {
            data[i][0] = (i+1)+"";
            data[i][1] = users.get(i).getName();
            data[i][2] = users.get(i).getPuntos()+"";
        }
        
        return data;
    }
    
    private ArrayList<User> sort(ArrayList<User> users){
        TreeSet<User> sortedUsers = new TreeSet<>();
        ArrayList<User> us = new ArrayList<>();
        for (User unSort : users) {
            sortedUsers.add(unSort);
        }
        for (User sort : sortedUsers) {
            us.add(sort);
        }
        return us;
    }
}
